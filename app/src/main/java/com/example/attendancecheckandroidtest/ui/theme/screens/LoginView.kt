package com.example.attendancecheckandroidtest.ui.theme.screens

import android.content.Context.MODE_PRIVATE
import androidx.compose.foundation.Image
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.attendancecheckandroidtest.R
import com.example.attendancecheckandroidtest.data.network.ApiService
import okhttp3.OkHttpClient
import androidx.compose.ui.platform.LocalFocusManager


//
//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun LoginView(navController: NavController, isLoggedIn: MutableState<Boolean>) {
//    var userId by remember { mutableStateOf("") }
//    var userName by remember { mutableStateOf("") }
//    var department by remember { mutableStateOf("") }
//    var errorMessage by remember { mutableStateOf("") }
//
//    // LocalContext Í∞ÄÏ†∏Ïò§Í∏∞
//    val context = LocalContext.current
//    val sharedPreferences = context.getSharedPreferences("MyPrefs", MODE_PRIVATE)
//    val client = OkHttpClient() // OkHttpClient Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
//    val apiService = ApiService(client, context)
//
//    // Ï†ÄÏû•Îêú Í∞í Î∂àÎü¨Ïò§Í∏∞
//    userId = sharedPreferences.getString("userId", "") ?: ""
//    userName = sharedPreferences.getString("userName", "") ?: ""
//    department = sharedPreferences.getString("department", "") ?: "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
//
//    val focusManager = LocalFocusManager.current
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(30.dp)
//            .pointerInput(Unit) {
//                detectTapGestures(onTap = {
//                    focusManager.clearFocus() // ÌôîÎ©¥ ÌÑ∞Ïπò Ïãú ÌÇ§Î≥¥Îìú ÎÇ¥Î¶º
//        })
//    },
//        horizontalAlignment = Alignment.CenterHorizontally,
//        verticalArrangement = Arrangement.Center
//    ) {
//        Text(
//            text = "üëã ÌôòÏòÅÌï©ÎãàÎã§!",
//            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
//            modifier = Modifier.padding(bottom = 40.dp),
//            color = MaterialTheme.colorScheme.onSurface // Îã§ÌÅ¨ Î™®ÎìúÏóê ÎßûÎäî ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
//        )
//
//        Image(
//            painter = painterResource(id = R.drawable.sch_logo),
//            contentDescription = null,
//            modifier = Modifier
//                .fillMaxWidth()
//                .clip(RoundedCornerShape(15.dp))
//        )
//
//        // ÌïôÍ≥º Î™©Î°ù Ï†ïÏùò
//        val departments =
//            listOf("Ïª¥Ìì®ÌÑ∞ÏÜåÌîÑÌä∏Ïõ®Ïñ¥Í≥µÌïôÍ≥º", "Ï†ïÎ≥¥Î≥¥Ìò∏ÌïôÍ≥º", "ÏùòÎ£åITÍ≥µÌïôÍ≥º", "AI¬∑ÎπÖÎç∞Ïù¥ÌÑ∞ÌïôÍ≥º", "ÏÇ¨Î¨ºÏù∏ÌÑ∞ÎÑ∑ÌïôÍ≥º", "Î©îÌÉÄÎ≤ÑÏä§&Í≤åÏûÑÌïôÍ≥º")
//        var selectedDepartment by remember { mutableStateOf(department) }
//        var expanded by remember { mutableStateOf(false) }
//
//        // ÌïôÍ≥º ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
//        ExposedDropdownMenuBox(
//            expanded = expanded,
//            onExpandedChange = { expanded = !expanded }
//        ) {
//            OutlinedTextField(
//                value = selectedDepartment,
//                onValueChange = {},
//                readOnly = true,
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .menuAnchor()
//                    .padding(top = 50.dp)
//                    .height(62.dp),
//                label = { Text("ÌïôÍ≥º") },
//                shape = RoundedCornerShape(12.dp),
//                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
//            )
//
//            // ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
//            ExposedDropdownMenu(
//                expanded = expanded,
//                onDismissRequest = { expanded = false }
//            ) {
//                departments.forEach { department ->
//                    DropdownMenuItem(
//                        text = { Text(department) },
//                        onClick = {
//                            selectedDepartment = department
//                            expanded = false
//                        }
//                    )
//                }
//            }
//        }
//
//        // ÌïôÎ≤à ÏûÖÎ†• ÌïÑÎìú
//        var studentNumber by remember { mutableStateOf("") } // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
//        // Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìú
//        var name by remember { mutableStateOf("") } // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
//
//        // ÌïôÎ≤à ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú
//        OutlinedTextField(
//            value = studentNumber,
//            onValueChange = { studentNumber = it },
//            label = { Text("ÌïôÎ≤à ÏûÖÎ†•") },
//            shape = RoundedCornerShape(12.dp),
//            modifier = Modifier
//                .fillMaxWidth()
//                .padding(vertical = 20.dp)
//                .height(62.dp),
//            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
//            isError = errorMessage.isNotEmpty() && studentNumber.isNotEmpty(),
//            singleLine = true
//        )
//
//        // Ïù¥Î¶Ñ ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú
//        OutlinedTextField(
//            value = name,
//            onValueChange = { name = it },
//            label = { Text("Ïù¥Î¶Ñ ÏûÖÎ†•") },
//            shape = RoundedCornerShape(12.dp),
//            modifier = Modifier
//                .fillMaxWidth()
//                .padding(vertical = 2.dp)
//                .height(62.dp),
//            singleLine = true // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ
//        )
//
//        // Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
//        if (errorMessage.isNotEmpty()) {
//            Text(
//                text = errorMessage,
//                color = Color.Red,
//                modifier = Modifier.padding(top = 8.dp)
//            )
//        }
//
//        // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
//        Button(
//            onClick = {
//                // ÏûÖÎ†• Í≤ÄÏ¶ù
//                when {
//                    studentNumber.isEmpty() -> {
//                        errorMessage = "ÌïôÎ≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
//                    }
//
//                    studentNumber.length != 8 -> {
//                        errorMessage = "ÌïôÎ≤à 8ÏûêÎ¶¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
//                    }
//
//                    name.isEmpty() -> {
//                        errorMessage = "Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
//                    }
//
//                    selectedDepartment == "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" -> {
//                        errorMessage = "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî."
//                    }
//
//                    else -> {
//                        // APIÎ•º ÌÜµÌï¥ Î°úÍ∑∏Ïù∏
//                        apiService.login(
//                            studentNumber,
//                            name,
//                            selectedDepartment,
//                            onSuccess = { accessToken, refreshToken ->
//                                isLoggedIn.value = true
//                                sharedPreferences.edit().apply {
//                                    putBoolean("isLoggedIn", true)
//                                    putString("userId", studentNumber)
//                                    putString("userName", name)
//                                    putString("department", selectedDepartment)
//                                    putString("access_token", accessToken)
//                                    putString("refresh_token", refreshToken)
//                                    apply()
//                                }
//                                isLoggedIn.value = true
//                                navController.navigate("main")
//                            },
//                            onError = { error ->
//                                errorMessage = error // ÏóêÎü¨ Î©îÏãúÏßÄ ÏÑ§Ï†ï
//                            }
//                        )
//                    }
//                }
//            },
//            modifier = Modifier
//                .fillMaxWidth()
//                .padding(top = 30.dp)
//        ) {
//            Text("Î°úÍ∑∏Ïù∏")
//        }
//    }
//}
//
import androidx.activity.compose.BackHandler // Ï∂îÍ∞ÄÎêú import

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginView(navController: NavController, isLoggedIn: MutableState<Boolean>) {
    var userId by remember { mutableStateOf("") }
    var userName by remember { mutableStateOf("") }
    var department by remember { mutableStateOf("") }
    var errorMessage by remember { mutableStateOf("") }

    // LocalContext Í∞ÄÏ†∏Ïò§Í∏∞
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("MyPrefs", MODE_PRIVATE)
    val client = OkHttpClient() // OkHttpClient Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    val apiService = ApiService(client, context)

    // Ï†ÄÏû•Îêú Í∞í Î∂àÎü¨Ïò§Í∏∞
    userId = sharedPreferences.getString("userId", "") ?: ""
    userName = sharedPreferences.getString("userName", "") ?: ""
    department = sharedPreferences.getString("department", "") ?: "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"

    // BackHandler Ï∂îÍ∞Ä
    BackHandler {
        // ÏïÑÎ¨¥ ÎèôÏûëÎèÑ ÌïòÏßÄ ÏïäÏùåÏúºÎ°úÏç® Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùÑ ÎπÑÌôúÏÑ±Ìôî
    }

    val focusManager = LocalFocusManager.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(30.dp)
            .pointerInput(Unit) {
                detectTapGestures(onTap = {
                    focusManager.clearFocus() // ÌôîÎ©¥ ÌÑ∞Ïπò Ïãú ÌÇ§Î≥¥Îìú ÎÇ¥Î¶º
                })
            },
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üëã ÌôòÏòÅÌï©ÎãàÎã§!",
            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
            modifier = Modifier.padding(bottom = 40.dp),
            color = MaterialTheme.colorScheme.onSurface // Îã§ÌÅ¨ Î™®ÎìúÏóê ÎßûÎäî ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
        )

        Image(
            painter = painterResource(id = R.drawable.sch_logo),
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(15.dp))
        )

        // ÌïôÍ≥º Î™©Î°ù Ï†ïÏùò
        val departments =
            listOf("Ïª¥Ìì®ÌÑ∞ÏÜåÌîÑÌä∏Ïõ®Ïñ¥Í≥µÌïôÍ≥º", "Ï†ïÎ≥¥Î≥¥Ìò∏ÌïôÍ≥º", "ÏùòÎ£åITÍ≥µÌïôÍ≥º", "AI¬∑ÎπÖÎç∞Ïù¥ÌÑ∞ÌïôÍ≥º", "ÏÇ¨Î¨ºÏù∏ÌÑ∞ÎÑ∑ÌïôÍ≥º", "Î©îÌÉÄÎ≤ÑÏä§&Í≤åÏûÑÌïôÍ≥º")
        var selectedDepartment by remember { mutableStateOf(department) }
        var expanded by remember { mutableStateOf(false) }

        // ÌïôÍ≥º ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
        ExposedDropdownMenuBox(
            expanded = expanded,
            onExpandedChange = { expanded = !expanded }
        ) {
            OutlinedTextField(
                value = selectedDepartment,
                onValueChange = {},
                readOnly = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor()
                    .padding(top = 50.dp)
                    .height(62.dp),
                label = { Text("ÌïôÍ≥º") },
                shape = RoundedCornerShape(12.dp),
                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
            )

            // ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
            ExposedDropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false }
            ) {
                departments.forEach { department ->
                    DropdownMenuItem(
                        text = { Text(department) },
                        onClick = {
                            selectedDepartment = department
                            expanded = false
                        }
                    )
                }
            }
        }

        // ÌïôÎ≤à ÏûÖÎ†• ÌïÑÎìú
        var studentNumber by remember { mutableStateOf("") } // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
        // Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìú
        var name by remember { mutableStateOf("") } // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï

        // ÌïôÎ≤à ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú
        OutlinedTextField(
            value = studentNumber,
            onValueChange = { studentNumber = it },
            label = { Text("ÌïôÎ≤à ÏûÖÎ†•") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 20.dp)
                .height(62.dp),
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            isError = errorMessage.isNotEmpty() && studentNumber.isNotEmpty(),
            singleLine = true
        )

        // Ïù¥Î¶Ñ ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("Ïù¥Î¶Ñ ÏûÖÎ†•") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 2.dp)
                .height(62.dp),
            singleLine = true // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ
        )

        // Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
        if (errorMessage.isNotEmpty()) {
            Text(
                text = errorMessage,
                color = Color.Red,
                modifier = Modifier.padding(top = 8.dp)
            )
        }

        // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
        Button(
            onClick = {
                // ÏûÖÎ†• Í≤ÄÏ¶ù
                when {
                    studentNumber.isEmpty() -> {
                        errorMessage = "ÌïôÎ≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                    }

                    studentNumber.length != 8 -> {
                        errorMessage = "ÌïôÎ≤à 8ÏûêÎ¶¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                    }

                    name.isEmpty() -> {
                        errorMessage = "Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                    }

                    selectedDepartment == "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" -> {
                        errorMessage = "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî."
                    }

                    else -> {
                        // APIÎ•º ÌÜµÌï¥ Î°úÍ∑∏Ïù∏
                        apiService.login(
                            studentNumber,
                            name,
                            selectedDepartment,
                            onSuccess = { accessToken, refreshToken ->
                                isLoggedIn.value = true
                                sharedPreferences.edit().apply {
                                    putBoolean("isLoggedIn", true)
                                    putString("userId", studentNumber)
                                    putString("userName", name)
                                    putString("department", selectedDepartment)
                                    putString("access_token", accessToken)
                                    putString("refresh_token", refreshToken)
                                    apply()
                                }
                                isLoggedIn.value = true
                                navController.navigate("main")
                            },
                            onError = { error ->
                                errorMessage = error // ÏóêÎü¨ Î©îÏãúÏßÄ ÏÑ§Ï†ï
                            }
                        )
                    }
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 30.dp)
        ) {
            Text("Î°úÍ∑∏Ïù∏")
        }
    }
}
