
package com.example.attendancecheckandroidtest.ui.theme.screens

import android.content.Context.MODE_PRIVATE
import android.content.Intent
import android.content.SharedPreferences
import android.net.Uri
import androidx.compose.foundation.Image
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.attendancecheckandroidtest.R
import com.example.attendancecheckandroidtest.data.network.ApiService
import okhttp3.OkHttpClient
import androidx.compose.ui.platform.LocalFocusManager
import androidx.activity.compose.BackHandler // Ï∂îÍ∞ÄÎêú import
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.rememberScrollState
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.ButtonDefaults
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.nativeKeyCode
import androidx.compose.ui.input.key.onKeyEvent
import androidx.compose.ui.text.style.LineHeightStyle
import androidx.compose.ui.text.style.TextAlign
import java.nio.file.WatchEvent

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginView(navController: NavController, isLoggedIn: MutableState<Boolean>, onError: (String) -> Unit) {
    var studentNumber by remember { mutableStateOf("") }
    var name by remember { mutableStateOf("") }
    var selectedDepartment by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") } // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉÅÌÉú Î≥ÄÏàò
    var confirmPassword by remember { mutableStateOf("") } // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏûÖÎ†• ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    var errorMessage by remember { mutableStateOf("") }
    var showConfirmationDialog by remember { mutableStateOf(false) }

    // LocalContext Í∞ÄÏ†∏Ïò§Í∏∞
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("MyPrefs", MODE_PRIVATE)
    val apiService = ApiService(context, client2 = OkHttpClient())

    var showAlertDialog by remember { mutableStateOf(false) }
    var alertDialogTitle by remember { mutableStateOf("") }
    var alertDialogMessage by remember { mutableStateOf("") }

    // BackHandler Ï∂îÍ∞Ä
    BackHandler {
        // ÏïÑÎ¨¥ ÎèôÏûëÎèÑ ÌïòÏßÄ ÏïäÏùåÏúºÎ°úÏç® Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùÑ ÎπÑÌôúÏÑ±Ìôî
    }

    val focusManager = LocalFocusManager.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(30.dp)
            .verticalScroll(rememberScrollState())
            .pointerInput(Unit) {
                detectTapGestures(onTap = {
                    focusManager.clearFocus() // ÌôîÎ©¥ ÌÑ∞Ïπò Ïãú ÌÇ§Î≥¥Îìú ÎÇ¥Î¶º
                })
            },
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(0.dp)
    ) {
        Text(
            text = "üëã ÌôòÏòÅÌï©ÎãàÎã§!",
            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
            modifier = Modifier.padding(bottom = 40.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        Image(
            painter = painterResource(id = R.drawable.sch_logo),
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(15.dp))
        )

        // ÌïôÍ≥º Î™©Î°ù Ï†ïÏùò
        val departments = listOf("Ïª¥Ìì®ÌÑ∞ÏÜåÌîÑÌä∏Ïõ®Ïñ¥Í≥µÌïôÍ≥º", "Ï†ïÎ≥¥Î≥¥Ìò∏ÌïôÍ≥º", "ÏùòÎ£åITÍ≥µÌïôÍ≥º", "AI¬∑ÎπÖÎç∞Ïù¥ÌÑ∞ÌïôÍ≥º", "ÏÇ¨Î¨ºÏù∏ÌÑ∞ÎÑ∑ÌïôÍ≥º", "Î©îÌÉÄÎ≤ÑÏä§&Í≤åÏûÑÌïôÍ≥º")
        var expanded by remember { mutableStateOf(false) }

        Text(
            "ÌïôÍ≥º ÏÑ†ÌÉù",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 50.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        // ÌïôÍ≥º ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
        ExposedDropdownMenuBox(
            expanded = expanded,
            onExpandedChange = { expanded = !expanded }
        ) {
            OutlinedTextField(
                value = selectedDepartment,
                onValueChange = {},
                readOnly = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor()
                    .padding(top = 5.dp)
                    .height(70.dp),
                label = { Text("ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî") },
                shape = RoundedCornerShape(12.dp),
                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
            )

            // ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
            ExposedDropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false }
            ) {
                departments.forEach { department ->
                    DropdownMenuItem(
                        text = { Text(department) },
                        onClick = {
                            selectedDepartment = department
                            expanded = false
                        }
                    )
                }
            }
        }

        Text(
            "ÌïôÎ≤à ÏûÖÎ†•",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 20.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        // ÌïôÎ≤à ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú (Ïà´ÏûêÎßå ÏûÖÎ†• Í∞ÄÎä•)
        OutlinedTextField(
            value = studentNumber,
            onValueChange = {
                // Ïà´ÏûêÎßå ÏûÖÎ†•ÌïòÎèÑÎ°ù Ï†úÌïú
                if (it.all { char -> char.isDigit() }) {
                    studentNumber = it
                }
            },
            label = { Text("ÌïôÎ≤à ÏûÖÎ†•") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(70.dp)
                .padding(top = 5.dp)
                .onKeyEvent { keyEvent ->
                    if (keyEvent.key.nativeKeyCode == android.view.KeyEvent.KEYCODE_ENTER) {
                        focusManager.moveFocus(FocusDirection.Down)
                        true
                    } else {
                        false
                    }
                },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            isError = errorMessage.isNotEmpty() && studentNumber.isNotEmpty(),
            singleLine = true
        )

        Text(
            "Ïù¥Î¶Ñ ÏûÖÎ†•",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 20.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        // Ïù¥Î¶Ñ ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÌïÑÎìú (Ïä§ÌéòÏù¥Ïä§Î∞î Î∞©ÏßÄ)
        OutlinedTextField(
            value = name,
            onValueChange = {
                // Ïä§ÌéòÏù¥Ïä§Î∞îÍ∞Ä Ìè¨Ìï®ÎêòÏßÄ ÏïäÎèÑÎ°ù Ï†úÌïú
                if (!it.contains(" ")) {
                    name = it
                }
            },
            label = { Text("Ïù¥Î¶Ñ ÏûÖÎ†•") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(70.dp)
                .padding(top = 5.dp)
                .onKeyEvent { keyEvent ->
                    if (keyEvent.key.nativeKeyCode == android.view.KeyEvent.KEYCODE_ENTER) {
                        focusManager.moveFocus(FocusDirection.Down)
                        true
                    } else {
                        false
                    }
                },
            singleLine = true
        )

        Text(
            "ÎπÑÎ∞ÄÎ≤àÌò∏",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 20.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(70.dp)
                .padding(top = 5.dp)
                .onKeyEvent { keyEvent ->
                    if (keyEvent.key.nativeKeyCode == android.view.KeyEvent.KEYCODE_ENTER) {
                        focusManager.clearFocus()
                        true
                    } else {
                        false
                    }
                },
            visualTransformation = PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Ascii), // ÏïÑÏä§ÌÇ§ ÌÇ§Î≥¥Îìú ÏÑ§Ï†ï
            isError = errorMessage.isNotEmpty() && password.isNotEmpty(),
            singleLine = true
        )

        Text(
            "ÎåÄ‚Ä¢ÏÜå‚Ä¢ÌäπÏàòÎ¨∏Ïûê/Ïà´Ïûê Ìè¨Ìï® 8ÏûêÎ¶¨ Ïù¥ÏÉÅ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî!",
            style = MaterialTheme.typography.bodySmall,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 5.dp),
            color = MaterialTheme.colorScheme.onSurface
        )


        Text(
            "ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÌôïÏù∏",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier
                .align(Alignment.Start)
                .padding(start = 5.dp)
                .padding(top = 20.dp),
            color = MaterialTheme.colorScheme.onSurface
        )

        OutlinedTextField(
            value = confirmPassword,
            onValueChange = { confirmPassword = it },
            label = { Text("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ïû¨ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî") },
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(70.dp)
                .padding(top = 5.dp)
                .onKeyEvent { keyEvent ->
                    if (keyEvent.key.nativeKeyCode == android.view.KeyEvent.KEYCODE_ENTER) {
                        focusManager.clearFocus()
                        true
                    } else {
                        false
                    }
                },
            visualTransformation = PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Ascii), // ÏïÑÏä§ÌÇ§ ÌÇ§Î≥¥Îìú ÏÑ§Ï†ï
            isError = errorMessage.isNotEmpty() && confirmPassword.isNotEmpty(),
            singleLine = true
        )
        // Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
        if (errorMessage.isNotEmpty()) {
            Text(
                text = errorMessage,
                color = Color.Red,
            )
        }

        // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
        Button(
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF26539C)),
            onClick = {
                val validationResult = validateInputs(
                    studentNumber,
                    name,
                    selectedDepartment,
                    password,
                    confirmPassword // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏûÖÎ†• Ï∂îÍ∞Ä
                )

                when {
                    studentNumber.isEmpty() -> {
                        onError("ÌïôÎ≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                    }
                    studentNumber.length != 8 -> {
                        onError("ÌïôÎ≤à 8ÏûêÎ¶¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")
                    }
                    name.isEmpty() -> {
                        onError("Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                    }
                    selectedDepartment.isEmpty() -> {
                        onError("ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
                    }
                    password.isEmpty() -> {
                        onError("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                    }
                    else -> {
                        if (validationResult.first) {
                            alertDialogTitle = "ÏûÖÎ†•Îêú Ï†ïÎ≥¥ ÌôïÏù∏"
                            alertDialogMessage = "ÏûÖÎ†•Ìïú Ï†ïÎ≥¥Í∞Ä ÎßûÏúºÏã†Í∞ÄÏöî?\nÏûÖÎ†• Ï†ïÎ≥¥Í∞Ä Îã§Î•º Ïãú Î∂àÏù¥ÏùµÏù¥ ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§!"
                            showConfirmationDialog = true
                        } else {
                            alertDialogTitle = "ÏûÖÎ†• Ïò§Î•ò"
                            alertDialogMessage = validationResult.second
                            showAlertDialog = true
                        }
                    }
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 40.dp)
        ) {
            Text("Î°úÍ∑∏Ïù∏",
                color = Color.White
            )
        }

        Box(
            modifier = Modifier
                .fillMaxWidth(),
            contentAlignment = Alignment.Center // Ï§ëÏïô Ï†ïÎ†¨
        ) {
            // Î¨∏ÏùòÌïòÍ∏∞ Î≤ÑÌäº
            PlainTextButton(
                text = "ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÏã†Í∞ÄÏöî?",
                onClick = {
                    val url = "https://potent-barnacle-025.notion.site/FAQ-116c07204d29805a8418d9a37bf330a2?pvs=4"
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                    context.startActivity(intent) // Ïô∏Î∂Ä Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú URL Ïó¥Í∏∞
                },
                textColor = Color(0xFF26539C)
            )
        }
    }

    if (showConfirmationDialog) {
        AlertDialog(
            onDismissRequest = { showConfirmationDialog = false },
            title = { Text(alertDialogTitle) },
            text = { Text(alertDialogMessage) },
            confirmButton = {
                Button(onClick = {
                    showConfirmationDialog = false
                    performLogin(
                        studentNumber,
                        name,
                        selectedDepartment,
                        password,
                        navController,
                        sharedPreferences,
                        apiService,
                        onError = { errorMessage = it },
                        onSuccess = {
                            alertDialogTitle = "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ"
                            alertDialogMessage = String.format("ÏïàÎÖïÌïòÏÑ∏Ïöî! %sÎãò!", name)
                            showAlertDialog = true
                        },
                        onClearInputs = {
                            studentNumber = ""
                            name = ""
                            selectedDepartment = ""
                            password = ""
                            confirmPassword = ""
                            errorMessage = ""
                        }
                    )

                    alertDialogTitle = "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ"
                    alertDialogMessage = String.format("ÏïàÎÖïÌïòÏÑ∏Ïöî! %sÎãò!", name)
                    showAlertDialog = true
                }) {
                    Text("Î°úÍ∑∏Ïù∏")
                }
            },
            dismissButton = {
                Button(onClick = { showConfirmationDialog = false }) {
                    Text("Ï∑®ÏÜå")
                }
            }
        )
    }

    // AlertDialog ÌëúÏãú
    if (showAlertDialog) {
        AlertDialog(
            onDismissRequest = { showAlertDialog = false },
            title = { Text(alertDialogTitle) },
            text = { Text(alertDialogMessage) },
            confirmButton = {
                Button(onClick = {
                    showAlertDialog = false
                    if (alertDialogTitle == "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ") {
                        navController.navigate("main")
                    }
                }) {
                    Text("ÌôïÏù∏")
                }
            }
        )
    }
}

// ÎÇòÎ®∏ÏßÄ Ìï®ÏàòÎäî ÎèôÏùºÌïòÍ≤å Ïú†ÏßÄ

private fun validateInputs(
    studentNumber: String,
    name: String,
    selectedDepartment: String,
    password: String,
    confirmPassword: String // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏûÖÎ†• Ï∂îÍ∞Ä
): Pair<Boolean, String> {
    // ÌïôÍ≥º Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (selectedDepartment.isEmpty()) {
        return Pair(false, "ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
    }

    // ÌïôÎ≤à Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (studentNumber.isEmpty()) {
        return Pair(false, "ÌïôÎ≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    }
    if (studentNumber.length != 8) {
        return Pair(false, "ÌïôÎ≤àÏùÄ 8ÏûêÎ¶¨Ïó¨Ïïº Ìï©ÎãàÎã§.")
    }
    if (!studentNumber.all { it.isDigit() }) {
        return Pair(false, "ÌïôÎ≤àÏùÄ Ïà´ÏûêÎßå Ìè¨Ìï®Ìï¥Ïïº Ìï©ÎãàÎã§.")
    }
    if (!studentNumber.startsWith("201") && !studentNumber.startsWith("2020") &&
        !studentNumber.startsWith("2021") && !studentNumber.startsWith("2022") &&
        !studentNumber.startsWith("2023") &&         !studentNumber.startsWith("2024")) {
        return Pair(false, "ÌïôÎ≤àÏùÄ 201, 2020, 2021, 2022, 2023, ÎòêÎäî 2024Î°ú ÏãúÏûëÌï¥Ïïº Ìï©ÎãàÎã§.")
    }

    // Ïù¥Î¶Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (name.isEmpty()) {
        return Pair(false, "Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    }
    if (name.any { it.isDigit() }) {
        return Pair(false, "Ïù¥Î¶ÑÏóê Ïà´ÏûêÍ∞Ä Ìè¨Ìï®Îê† Ïàò ÏóÜÏäµÎãàÎã§.")
    }
    if (name.any { !it.isLetter() && !it.isWhitespace() }) {
        return Pair(false, "Ïù¥Î¶ÑÏóê ÌäπÏàòÎ¨∏ÏûêÍ∞Ä Ìè¨Ìï®Îê† Ïàò ÏóÜÏäµÎãàÎã§.")
    }

    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (password.isEmpty()) {
        return Pair(false, "ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    }
    if (password != confirmPassword) { // ÎπÑÎ∞ÄÎ≤àÌò∏ÏôÄ Ïû¨ÏûÖÎ†•Îêú ÎπÑÎ∞ÄÎ≤àÌò∏ ÎπÑÍµê
        return Pair(false, "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
    }
    if (!isValidPassword(password)) {
        return Pair(false, "ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÎåÄÎ¨∏Ïûê, ÏÜåÎ¨∏Ïûê, ÌäπÏàòÎ¨∏ÏûêÎ•º Ìè¨Ìï®ÌïòÍ≥† 8ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.")
    }

    return Pair(true, "")
}

private fun isValidPassword(password: String): Boolean {
    val upperCaseRegex = Regex("[A-Z]")
    val lowerCaseRegex = Regex("[a-z]")
    val specialCharRegex = Regex("[!@#$%^&*(),.?\":{}|<>]")
    return password.length >= 8 &&
            upperCaseRegex.containsMatchIn(password) &&
            lowerCaseRegex.containsMatchIn(password) &&
            specialCharRegex.containsMatchIn(password)
}

private fun performLogin(
    studentNumber: String,
    name: String,
    selectedDepartment: String,
    password: String,
    navController: NavController,
    sharedPreferences: SharedPreferences,
    apiService: ApiService,
    onError: (String) -> Unit,
    onSuccess: () -> Unit,
    onClearInputs: () -> Unit
) {
    // APIÎ•º ÌÜµÌï¥ Î°úÍ∑∏Ïù∏
    apiService.login(
        studentNumber,
        name,
        selectedDepartment,
        password,
        onSuccess = { accessToken, refreshToken ->
            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú Ï≤òÎ¶¨
            sharedPreferences.edit().apply {
                putBoolean("isLoggedIn", true)
                putString("userId", studentNumber)
                putString("userName", name)
                putString("department", selectedDepartment)
                putString("access_token", accessToken)
                putString("refresh_token", refreshToken)
                apply()
            }
            onSuccess()
            onClearInputs()
        },
        onError = { error ->
            onError(error) // ÏóêÎü¨ Î©îÏãúÏßÄ ÏÑ§Ï†ï
        }
    )
}

@Composable
fun PlainTextButton(
    text: String,
    onClick: () -> Unit,
    textColor: Color = Color.Blue
) {
    Text(
        text = text,
        modifier = Modifier
            .fillMaxWidth() // Î≤ÑÌäºÏù¥ Í∞ÄÎä•Ìïú ÏµúÎåÄ ÎÑàÎπÑÎ•º Ï∞®ÏßÄÌïòÎèÑÎ°ù ÏÑ§Ï†ï
            .padding(16.dp) // ÌÖçÏä§Ìä∏ Ï£ºÎ≥ÄÏóê Ìå®Îî© Ï∂îÍ∞Ä
            .clickable(onClick = onClick) // ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú ÏòÅÏó≠ ÏÑ§Ï†ï
            .wrapContentSize(Alignment.Center), // ÌÖçÏä§Ìä∏Î•º Ï§ëÏïôÏóê Ï†ïÎ†¨
        color = textColor, // ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ ÏÑ§Ï†ï
        textAlign = TextAlign.Center
    )
}
